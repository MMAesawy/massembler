
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT fatal: not a git repository (or any of the parent directories): .git)
//----------------------------------------------------

package grammar;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT fatal: not a git repository (or any of the parent directories): .git) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\011\003\000\002\012\004\000\002" +
    "\012\003\000\002\013\006\000\002\013\003\000\002\014" +
    "\010\000\002\014\003\000\002\015\010\000\002\015\003" +
    "\000\002\016\004\000\002\016\005\000\002\017\003\000" +
    "\002\020\004\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\046\007\035\011\034\012\033\013\032\014" +
    "\030\015\027\016\031\017\026\020\025\021\023\022\022" +
    "\023\021\024\020\025\016\026\015\027\014\030\040\031" +
    "\004\001\002\000\004\004\066\001\002\000\006\002\uffe2" +
    "\010\uffe2\001\002\000\006\002\uffe4\010\uffe4\001\002\000" +
    "\006\002\uffe6\010\uffe6\001\002\000\006\002\uffe8\010\uffe8" +
    "\001\002\000\006\002\uffdf\010\uffdf\001\002\000\004\002" +
    "\065\001\002\000\004\005\043\001\002\000\004\005\ufff9" +
    "\001\002\000\004\005\uffef\001\002\000\004\005\ufff5\001" +
    "\002\000\006\031\004\033\052\001\002\000\004\005\ufff6" +
    "\001\002\000\004\005\ufff1\001\002\000\004\005\ufff7\001" +
    "\002\000\004\005\uffee\001\002\000\004\002\uffff\001\002" +
    "\000\004\005\ufff4\001\002\000\006\031\uffeb\033\uffeb\001" +
    "\002\000\004\005\uffed\001\002\000\004\005\ufff0\001\002" +
    "\000\004\005\uffec\001\002\000\004\005\ufff8\001\002\000" +
    "\004\005\ufff2\001\002\000\004\005\ufffa\001\002\000\044" +
    "\007\035\011\034\012\033\013\032\014\030\015\027\016" +
    "\031\017\026\020\025\021\023\022\022\023\021\024\020" +
    "\025\016\026\015\027\014\030\040\001\002\000\010\002" +
    "\uffdd\007\035\017\026\001\002\000\004\005\043\001\002" +
    "\000\004\005\ufff3\001\002\000\004\002\000\001\002\000" +
    "\004\006\046\001\002\000\004\032\044\001\002\000\004" +
    "\033\045\001\002\000\010\002\ufffb\006\ufffb\010\ufffb\001" +
    "\002\000\004\005\043\001\002\000\004\006\050\001\002" +
    "\000\006\031\004\033\052\001\002\000\006\002\uffe3\010" +
    "\uffe3\001\002\000\006\002\ufffd\010\ufffd\001\002\000\006" +
    "\002\ufffc\010\ufffc\001\002\000\004\002\uffde\001\002\000" +
    "\004\010\056\001\002\000\006\002\uffe0\010\uffe0\001\002" +
    "\000\006\002\uffe1\010\uffe1\001\002\000\010\002\uffe9\006" +
    "\061\010\uffe9\001\002\000\004\005\043\001\002\000\010" +
    "\002\uffe7\006\063\010\uffe7\001\002\000\004\005\043\001" +
    "\002\000\006\002\uffe5\010\uffe5\001\002\000\004\002\001" +
    "\001\002\000\012\002\ufffe\007\ufffe\010\ufffe\017\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\032\002\011\003\035\006\012\007\036\010" +
    "\016\012\010\013\007\014\006\015\005\016\004\017\023" +
    "\020\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\052\004\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\012\007\036\010" +
    "\016\012\010\013\007\014\006\015\005\016\004\017\054" +
    "\001\001\000\006\010\016\016\053\001\001\000\004\005" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\046\001\001\000\002\001\001\000\006" +
    "\003\052\004\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\061\001\001\000\002\001\001\000\004\005\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public grammar.Absyn.Stmt pStmt() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (grammar.Absyn.Stmt) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Stmt EOF 
            {
              Object RESULT =null;
		grammar.Absyn.Stmt start_val = (grammar.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Stmt ::= LblLine 
            {
              grammar.Absyn.Stmt RESULT =null;
		grammar.Absyn.LblLine p_1 = (grammar.Absyn.LblLine)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.StmtLblLine(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Stmt ::= Type 
            {
              grammar.Absyn.Stmt RESULT =null;
		grammar.Absyn.Type p_1 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.StmtType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Label ::= _STRING_ _SYMB_0 
            {
              grammar.Absyn.Label RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.Lbl1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Label",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Imm ::= _INTEGER_ 
            {
              grammar.Absyn.Imm RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.Immi(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Imm ::= Label 
            {
              grammar.Absyn.Imm RESULT =null;
		grammar.Absyn.Label p_1 = (grammar.Absyn.Label)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.Imml(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Reg ::= _SYMB_1 _CHAR_ _INTEGER_ 
            {
              grammar.Absyn.Reg RESULT =null;
		Character p_2 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.Rg(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ROper ::= _SYMB_5 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_add(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ROper ::= _SYMB_19 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_sub(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ROper ::= _SYMB_7 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_and(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ROper ::= _SYMB_14 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_or(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ROper ::= _SYMB_16 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_sll(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ROper ::= _SYMB_17 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_slt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ROper ::= _SYMB_12 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_jr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ROper ::= _SYMB_20 
            {
              grammar.Absyn.ROper RESULT =null;
		 RESULT = new grammar.Absyn.ROper_syscall(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROper",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IOper ::= _SYMB_6 
            {
              grammar.Absyn.IOper RESULT =null;
		 RESULT = new grammar.Absyn.IOper_addi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOper",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IOper ::= _SYMB_15 
            {
              grammar.Absyn.IOper RESULT =null;
		 RESULT = new grammar.Absyn.IOper_ori(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOper",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IOper ::= _SYMB_8 
            {
              grammar.Absyn.IOper RESULT =null;
		 RESULT = new grammar.Absyn.IOper_andi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOper",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IOper ::= _SYMB_18 
            {
              grammar.Absyn.IOper RESULT =null;
		 RESULT = new grammar.Absyn.IOper_slti(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOper",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IOper ::= _SYMB_13 
            {
              grammar.Absyn.IOper RESULT =null;
		 RESULT = new grammar.Absyn.IOper_lui(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOper",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IOper ::= _SYMB_9 
            {
              grammar.Absyn.IOper RESULT =null;
		 RESULT = new grammar.Absyn.IOper_beq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOper",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IOper ::= _SYMB_10 
            {
              grammar.Absyn.IOper RESULT =null;
		 RESULT = new grammar.Absyn.IOper_bne(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOper",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // JOper ::= _SYMB_11 
            {
              grammar.Absyn.JOper RESULT =null;
		 RESULT = new grammar.Absyn.JOper_j(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JOper",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type0 ::= ROper 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.ROper p_1 = (grammar.Absyn.ROper)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ER0(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type0",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type1 ::= ROper Reg 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.ROper p_1 = (grammar.Absyn.ROper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.Reg p_2 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ER1(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type1 ::= Type2 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.Type p_1 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type2 ::= ROper Reg _SYMB_2 Reg 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.ROper p_1 = (grammar.Absyn.ROper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.Reg p_2 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Reg p_4 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ER2(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type2",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type2 ::= Type3 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.Type p_1 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type2",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type3 ::= ROper Reg _SYMB_2 Reg _SYMB_2 Reg 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.ROper p_1 = (grammar.Absyn.ROper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		grammar.Absyn.Reg p_2 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		grammar.Absyn.Reg p_4 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Reg p_6 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.ER3(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type3 ::= Type4 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.Type p_1 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type4 ::= IOper Reg _SYMB_2 Reg _SYMB_2 Imm 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.IOper p_1 = (grammar.Absyn.IOper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		grammar.Absyn.Reg p_2 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		grammar.Absyn.Reg p_4 = (grammar.Absyn.Reg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Imm p_6 = (grammar.Absyn.Imm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.EI(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type4",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type4 ::= Type5 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.Type p_1 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type4",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type5 ::= JOper Imm 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.JOper p_1 = (grammar.Absyn.JOper)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.Imm p_2 = (grammar.Absyn.Imm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.EJ(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type5",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type5 ::= _SYMB_3 Type _SYMB_4 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.Type p_2 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type5",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= Type1 
            {
              grammar.Absyn.Type RESULT =null;
		grammar.Absyn.Type p_1 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LblLine ::= Label Type5 
            {
              grammar.Absyn.LblLine RESULT =null;
		grammar.Absyn.Label p_1 = (grammar.Absyn.Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.Type p_2 = (grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.LbledLine(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblLine",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LblLine ::= Label 
            {
              grammar.Absyn.LblLine RESULT =null;
		grammar.Absyn.Label p_1 = (grammar.Absyn.Label)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new grammar.Absyn.LbledLine2(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblLine",14, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
