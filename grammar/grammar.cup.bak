// -*- Java -*- This Cup file was machine-generated by BNFC
package grammar;

parser code {:
  public grammar.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (grammar.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal grammar.Absyn.Program Program;
nonterminal grammar.Absyn.ListStmt ListStmt;
nonterminal grammar.Absyn.Stmt Stmt;
nonterminal grammar.Absyn.Label Label;
nonterminal grammar.Absyn.Offset Offset;
nonterminal grammar.Absyn.LblInstr LblInstr;
nonterminal grammar.Absyn.Imm Imm;
nonterminal grammar.Absyn.Addr Addr;
nonterminal grammar.Absyn.RInstr RInstr;
nonterminal grammar.Absyn.IInstr IInstr;
nonterminal grammar.Absyn.JInstr JInstr;
nonterminal grammar.Absyn.Instr Instr;

terminal _SYMB_0;    //   :
terminal _SYMB_1;    //   (
terminal _SYMB_2;    //   )
terminal _SYMB_3;    //   ,
terminal _SYMB_4;    //   add
terminal _SYMB_5;    //   addi
terminal _SYMB_6;    //   and
terminal _SYMB_7;    //   andi
terminal _SYMB_8;    //   beq
terminal _SYMB_9;    //   bne
terminal _SYMB_10;    //   j
terminal _SYMB_11;    //   jr
terminal _SYMB_12;    //   lui
terminal _SYMB_13;    //   lw
terminal _SYMB_14;    //   or
terminal _SYMB_15;    //   ori
terminal _SYMB_16;    //   sll
terminal _SYMB_17;    //   slt
terminal _SYMB_18;    //   slti
terminal _SYMB_19;    //   srl
terminal _SYMB_20;    //   sub
terminal _SYMB_21;    //   sw
terminal _SYMB_22;    //   syscall



terminal Integer _INTEGER_;



terminal String Reg;
terminal String LineLabel;


start with Program;


Program ::= ListStmt:p_1  {: RESULT = new grammar.Absyn.PDefs(p_1); :} 
;
ListStmt ::=  /* empty */  {: RESULT = new grammar.Absyn.ListStmt(); :} 
  | ListStmt:p_1 Stmt:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Stmt ::= LblInstr:p_1  {: RESULT = new grammar.Absyn.EStmtLbl(p_1); :} 
  | Instr:p_1  {: RESULT = new grammar.Absyn.EStmtInstr(p_1); :}
;
Label ::= LineLabel:p_1 _SYMB_0  {: RESULT = new grammar.Absyn.ELbl(p_1); :} 
;
Offset ::= _INTEGER_:p_1 _SYMB_1 Reg:p_3 _SYMB_2  {: RESULT = new grammar.Absyn.OffRel(p_1,p_3); :} 
  | Label:p_1  {: RESULT = new grammar.Absyn.OffLbl(p_1); :}
;
LblInstr ::= Label:p_1 Instr:p_2  {: RESULT = new grammar.Absyn.LbledStmt(p_1,p_2); :} 
  | Label:p_1  {: RESULT = new grammar.Absyn.LbledLine(p_1); :}
;
Imm ::= _INTEGER_:p_1  {: RESULT = new grammar.Absyn.Immi(p_1); :} 
;
Addr ::= Imm:p_1  {: RESULT = new grammar.Absyn.AddAbs(p_1); :} 
  | Offset:p_1  {: RESULT = new grammar.Absyn.AddRel(p_1); :}
;
RInstr ::= _SYMB_4 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Reg:p_6  {: RESULT = new grammar.Absyn.EAdd(p_2,p_4,p_6); :} 
  | _SYMB_20 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Reg:p_6  {: RESULT = new grammar.Absyn.ESub(p_2,p_4,p_6); :}
  | _SYMB_6 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Reg:p_6  {: RESULT = new grammar.Absyn.EAnd(p_2,p_4,p_6); :}
  | _SYMB_14 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Reg:p_6  {: RESULT = new grammar.Absyn.EOr(p_2,p_4,p_6); :}
  | _SYMB_16 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Imm:p_6  {: RESULT = new grammar.Absyn.ESll(p_2,p_4,p_6); :}
  | _SYMB_19 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Imm:p_6  {: RESULT = new grammar.Absyn.ESrl(p_2,p_4,p_6); :}
  | _SYMB_17 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Reg:p_6  {: RESULT = new grammar.Absyn.ESlt(p_2,p_4,p_6); :}
  | _SYMB_11 Reg:p_2  {: RESULT = new grammar.Absyn.EJr(p_2); :}
;
IInstr ::= _SYMB_5 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Imm:p_6  {: RESULT = new grammar.Absyn.EAddi(p_2,p_4,p_6); :} 
  | _SYMB_15 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Imm:p_6  {: RESULT = new grammar.Absyn.EOri(p_2,p_4,p_6); :}
  | _SYMB_7 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Imm:p_6  {: RESULT = new grammar.Absyn.EAndi(p_2,p_4,p_6); :}
  | _SYMB_18 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Imm:p_6  {: RESULT = new grammar.Absyn.ESlti(p_2,p_4,p_6); :}
  | _SYMB_9 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Offset:p_6  {: RESULT = new grammar.Absyn.EBne(p_2,p_4,p_6); :}
  | _SYMB_8 Reg:p_2 _SYMB_3 Reg:p_4 _SYMB_3 Offset:p_6  {: RESULT = new grammar.Absyn.EBeq(p_2,p_4,p_6); :}
  | _SYMB_12 Reg:p_2 _SYMB_3 Imm:p_4  {: RESULT = new grammar.Absyn.ELui(p_2,p_4); :}
  | _SYMB_21 Reg:p_2 _SYMB_3 Offset:p_4  {: RESULT = new grammar.Absyn.ESw(p_2,p_4); :}
  | _SYMB_13 Reg:p_2 _SYMB_3 Offset:p_4  {: RESULT = new grammar.Absyn.ELw(p_2,p_4); :}
;
JInstr ::= _SYMB_10 Addr:p_2  {: RESULT = new grammar.Absyn.EJ(p_2); :} 
;
Instr ::= _SYMB_22  {: RESULT = new grammar.Absyn.ESyscall(); :} 
  | RInstr:p_1  {: RESULT = new grammar.Absyn.ERInstr(p_1); :}
  | IInstr:p_1  {: RESULT = new grammar.Absyn.EIInstr(p_1); :}
  | JInstr:p_1  {: RESULT = new grammar.Absyn.EJInstr(p_1); :}
;

